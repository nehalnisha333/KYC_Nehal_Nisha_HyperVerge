import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Dimensions,
  StatusBar,
  ScrollView,
} from 'react-native';
import VoiceService from '../services/VoiceService';

const { width } = Dimensions.get('window');

const documentTypes = [
  {
    id: 'aadhaar',
    icon: 'üìÑ',
    name: { en: 'Aadhaar Card', hi: '‡§Ü‡§ß‡§æ‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§°', te: '‡∞Ü‡∞ß‡∞æ‡∞∞‡±ç ‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡±ç', ta: '‡ÆÜ‡Æ§‡Ææ‡Æ∞‡Øç ‡ÆÖ‡Æü‡Øç‡Æü‡Øà' },
    description: { en: 'Government ID with biometric data', hi: '‡§¨‡§æ‡§Ø‡•ã‡§Æ‡•á‡§ü‡•ç‡§∞‡§ø‡§ï ‡§°‡•á‡§ü‡§æ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§™‡§π‡§ö‡§æ‡§®', te: '‡∞¨‡∞Ø‡±ã‡∞Æ‡±Ü‡∞ü‡±ç‡∞∞‡∞ø‡∞ï‡±ç ‡∞°‡±á‡∞ü‡∞æ‡∞§‡±ã ‡∞™‡±ç‡∞∞‡∞≠‡±Å‡∞§‡±ç‡∞µ ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞™‡±Å', ta: '‡Æ™‡ÆØ‡Øã‡ÆÆ‡ØÜ‡Æü‡Øç‡Æ∞‡Æø‡Æï‡Øç ‡Æ§‡Æ∞‡Æµ‡ØÅ‡Æü‡Æ©‡Øç ‡ÆÖ‡Æ∞‡Æö‡ØÅ ‡ÆÖ‡Æü‡Øà‡ÆØ‡Ææ‡Æ≥ ‡ÆÖ‡Æü‡Øç‡Æü‡Øà' },
    popular: true
  },
  {
    id: 'pan',
    icon: 'üÜî',
    name: { en: 'PAN Card', hi: '‡§™‡•à‡§® ‡§ï‡§æ‡§∞‡•ç‡§°', te: '‡∞™‡∞æ‡∞®‡±ç ‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡±ç', ta: '‡Æ™‡Ææ‡Æ©‡Øç ‡ÆÖ‡Æü‡Øç‡Æü‡Øà' },
    description: { en: 'Permanent Account Number', hi: '‡§∏‡•ç‡§•‡§æ‡§Ø‡•Ä ‡§ñ‡§æ‡§§‡§æ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ', te: '‡∞∂‡∞æ‡∞∂‡±ç‡∞µ‡∞§ ‡∞ñ‡∞æ‡∞§‡∞æ ‡∞∏‡∞Ç‡∞ñ‡±ç‡∞Ø', ta: '‡Æ®‡Æø‡Æ∞‡Æ®‡Øç‡Æ§‡Æ∞ ‡Æï‡Æ£‡Æï‡Øç‡Æï‡ØÅ ‡Æé‡Æ£‡Øç' },
    popular: true
  },
  {
    id: 'driving_license',
    icon: 'üöó',
    name: { en: 'Driving License', hi: '‡§°‡•ç‡§∞‡§æ‡§á‡§µ‡§ø‡§Ç‡§ó ‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏', te: '‡∞°‡±ç‡∞∞‡±à‡∞µ‡∞ø‡∞Ç‡∞ó‡±ç ‡∞≤‡±à‡∞∏‡±Ü‡∞®‡±ç‡∞∏‡±ç', ta: '‡Æì‡Æü‡Øç‡Æü‡ØÅ‡Æ®‡Æ∞‡Øç ‡Æâ‡Æ∞‡Æø‡ÆÆ‡ÆÆ‡Øç' },
    description: { en: 'Valid driving permit', hi: '‡§µ‡•à‡§ß ‡§°‡•ç‡§∞‡§æ‡§á‡§µ‡§ø‡§Ç‡§ó ‡§™‡§∞‡§Æ‡§ø‡§ü', te: '‡∞ö‡±Ü‡∞≤‡±ç‡∞≤‡±Å‡∞¨‡∞æ‡∞ü‡±Å ‡∞Ö‡∞Ø‡±ç‡∞Ø‡±á ‡∞°‡±ç‡∞∞‡±à‡∞µ‡∞ø‡∞Ç‡∞ó‡±ç ‡∞Ö‡∞®‡±Å‡∞Æ‡∞§‡∞ø', ta: '‡Æö‡ØÜ‡Æ≤‡Øç‡Æ≤‡ØÅ‡Æ™‡Æü‡Æø‡ÆØ‡Ææ‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æì‡Æü‡Øç‡Æü‡ØÅ‡Æ®‡Æ∞‡Øç ‡ÆÖ‡Æ©‡ØÅ‡ÆÆ‡Æ§‡Æø' },
    popular: false
  },
  {
    id: 'voter_id',
    icon: 'üó≥Ô∏è',
    name: { en: 'Voter ID', hi: '‡§µ‡•ã‡§ü‡§∞ ‡§Ü‡§à‡§°‡•Ä', te: '‡∞µ‡±ã‡∞ü‡∞∞‡±ç ‡∞ê‡∞°‡∞ø', ta: '‡Æµ‡Ææ‡Æï‡Øç‡Æï‡Ææ‡Æ≥‡Æ∞‡Øç ‡ÆÖ‡Æü‡Øà‡ÆØ‡Ææ‡Æ≥ ‡ÆÖ‡Æü‡Øç‡Æü‡Øà' },
    description: { en: 'Election Commission ID', hi: '‡§ö‡•Å‡§®‡§æ‡§µ ‡§Ü‡§Ø‡•ã‡§ó ‡§™‡§π‡§ö‡§æ‡§®', te: '‡∞é‡∞®‡±ç‡∞®‡∞ø‡∞ï‡∞≤ ‡∞ï‡∞Æ‡∞ø‡∞∑‡∞®‡±ç ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞™‡±Å', ta: '‡Æ§‡Øá‡Æ∞‡Øç‡Æ§‡Æ≤‡Øç ‡ÆÜ‡Æ£‡Øà‡ÆØ ‡ÆÖ‡Æü‡Øà‡ÆØ‡Ææ‡Æ≥ ‡ÆÖ‡Æü‡Øç‡Æü‡Øà' },
    popular: false
  },
  {
    id: 'passport',
    icon: 'üìò',
    name: { en: 'Passport', hi: '‡§™‡§æ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü', te: '‡∞™‡∞æ‡∞∏‡±ç‚Äå‡∞™‡±ã‡∞∞‡±ç‡∞ü‡±ç', ta: '‡Æï‡Æü‡Æµ‡ØÅ‡Æö‡Øç‡Æö‡ØÄ‡Æü‡Øç‡Æü‡ØÅ' },
    description: { en: 'International travel document', hi: '‡§Ö‡§Ç‡§§‡§∞‡•ç‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú', te: '‡∞Ö‡∞Ç‡∞§‡∞∞‡±ç‡∞ú‡∞æ‡∞§‡±Ä‡∞Ø ‡∞™‡±ç‡∞∞‡∞Ø‡∞æ‡∞£ ‡∞™‡∞§‡±ç‡∞∞‡∞Ç', ta: '‡Æö‡Æ∞‡Øç‡Æµ‡Æ§‡Øá‡Æö ‡Æ™‡ÆØ‡Æ£ ‡ÆÜ‡Æµ‡Æ£‡ÆÆ‡Øç' },
    popular: false
  }
];

const DocumentTypeScreen = ({ navigation, route }) => {
  const [selectedDocument, setSelectedDocument] = useState(null);
  const [language, setLanguage] = useState('en');

  useEffect(() => {
    if (route.params?.language) {
      setLanguage(route.params.language);
    }
    playInstructions();
  }, []);

  const playInstructions = async () => {
    try {
      const message = getLocalizedText('instruction', language);
      await VoiceService.speak(message, language);
    } catch (error) {
      console.log('Voice instruction failed:', error);
    }
  };

  const getLocalizedText = (key, lang) => {
    const texts = {
      title: {
        en: 'Choose Document Type',
        hi: '‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç',
        te: '‡∞™‡∞§‡±ç‡∞∞‡∞Ç ‡∞∞‡∞ï‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø',
        ta: '‡ÆÜ‡Æµ‡Æ£ ‡Æµ‡Æï‡Øà‡ÆØ‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç'
      },
      instruction: {
        en: 'Please select the document you want to verify',
        hi: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º ‡§ï‡•ã ‡§ö‡•Å‡§®‡•á‡§Ç ‡§ú‡§ø‡§∏‡•á ‡§Ü‡§™ ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç',
        te: '‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞ß‡±É‡∞µ‡±Ä‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞æ‡∞≤‡∞®‡±Å‡∞ï‡±Å‡∞Ç‡∞ü‡±Å‡∞®‡±ç‡∞® ‡∞™‡∞§‡±ç‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø',
        ta: '‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æö‡Æ∞‡Æø‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï ‡Æµ‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡ØÅ‡ÆÆ‡Øç ‡ÆÜ‡Æµ‡Æ£‡Æ§‡Øç‡Æ§‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç'
      },
      popular: {
        en: 'Most Popular',
        hi: '‡§∏‡§¨‡§∏‡•á ‡§≤‡•ã‡§ï‡§™‡•ç‡§∞‡§ø‡§Ø',
        te: '‡∞Ö‡∞§‡±ç‡∞Ø‡∞Ç‡∞§ ‡∞™‡±ç‡∞∞‡∞∏‡∞ø‡∞¶‡±ç‡∞ß',
        ta: '‡ÆÆ‡Æø‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Æø‡Æ∞‡Æ™‡Æ≤‡ÆÆ‡Ææ‡Æ©'
      },
      continue: {
        en: 'Continue',
        hi: '‡§Ü‡§ó‡•á ‡§¨‡§¢‡§º‡•á‡§Ç',
        te: '‡∞ï‡±ä‡∞®‡∞∏‡∞æ‡∞ó‡∞ø‡∞Ç‡∞ö‡±Å',
        ta: '‡Æ§‡Øä‡Æü‡Æ∞‡Æµ‡ØÅ‡ÆÆ‡Øç'
      }
    };
    return texts[key]?.[lang] || texts[key]?.en || '';
  };

  const handleDocumentSelect = async (documentId) => {
    setSelectedDocument(documentId);
    
    const document = documentTypes.find(doc => doc.id === documentId);
    if (document) {
      try {
        const message = `You selected ${document.name.en}`;
        await VoiceService.speak(message, 'en');
      } catch (error) {
        console.log('Voice feedback failed:', error);
      }
    }
  };

  const handleContinue = async () => {
    if (!selectedDocument) return;
    
    try {
      await VoiceService.speak('Great! Now let us capture your document', language);
      navigation.navigate('DocumentCapture', { 
        documentType: selectedDocument,
        language: language 
      });
    } catch (error) {
      console.log('Navigation voice failed:', error);
      navigation.navigate('DocumentCapture', { 
        documentType: selectedDocument,
        language: language 
      });
    }
  };

  const renderDocumentOption = (document) => {
    const isSelected = selectedDocument === document.id;
    
    return (
      <TouchableOpacity
        key={document.id}
        style={[
          styles.documentOption,
          isSelected && styles.selectedOption,
          document.popular && styles.popularOption
        ]}
        onPress={() => handleDocumentSelect(document.id)}
        activeOpacity={0.7}
      >
        {document.popular && (
          <View style={styles.popularBadge}>
            <Text style={styles.popularText}>{getLocalizedText('popular', language)}</Text>
          </View>
        )}
        
        <View style={styles.documentContent}>
          <Text style={styles.documentIcon}>{document.icon}</Text>
          <View style={styles.documentText}>
            <Text style={[
              styles.documentName,
              isSelected && styles.selectedText
            ]}>
              {document.name[language] || document.name.en}
            </Text>
            <Text style={[
              styles.documentDescription,
              isSelected && styles.selectedSubtext
            ]}>
              {document.description[language] || document.description.en}
            </Text>
          </View>
          {isSelected && (
            <Text style={styles.checkmark}>‚úì</Text>
          )}
        </View>
      </TouchableOpacity>
    );
  };

  return (
    <View style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor="#ffffff" />
      
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity 
          style={styles.backButton}
          onPress={() => navigation.goBack()}
        >
          <Text style={styles.backIcon}>‚Üê</Text>
        </TouchableOpacity>
        <Text style={styles.title}>{getLocalizedText('title', language)}</Text>
      </View>

      {/* Instruction */}
      <View style={styles.instructionContainer}>
        <Text style={styles.instruction}>
          {getLocalizedText('instruction', language)}
        </Text>
      </View>

      {/* Document Options */}
      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {documentTypes.map(renderDocumentOption)}
      </ScrollView>

      {/* Footer */}
      <View style={styles.footer}>
        <TouchableOpacity 
          style={[
            styles.continueButton,
            !selectedDocument && styles.disabledButton
          ]}
          onPress={handleContinue}
          disabled={!selectedDocument}
          activeOpacity={0.8}
        >
          <Text style={styles.continueButtonText}>
            {getLocalizedText('continue', language)}
          </Text>
          <Text style={styles.continueArrow}>‚Üí</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#ffffff',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingTop: 60,
    paddingHorizontal: 20,
    paddingBottom: 20,
  },
  backButton: {
    width: 44,
    height: 44,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 10,
  },
  backIcon: {
    fontSize: 24,
    color: '#1a73e8',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333333',
    flex: 1,
  },
  instructionContainer: {
    paddingHorizontal: 20,
    paddingBottom: 20,
  },
  instruction: {
    fontSize: 16,
    color: '#666666',
    textAlign: 'center',
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
  },
  documentOption: {
    backgroundColor: '#f8f9fa',
    borderRadius: 12,
    marginBottom: 12,
    borderWidth: 2,
    borderColor: 'transparent',
    position: 'relative',
  },
  selectedOption: {
    backgroundColor: '#e3f2fd',
    borderColor: '#1a73e8',
  },
  popularOption: {
    borderColor: '#ff9800',
    borderWidth: 1,
  },
  popularBadge: {
    position: 'absolute',
    top: -8,
    right: 12,
    backgroundColor: '#ff9800',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    zIndex: 1,
  },
  popularText: {
    fontSize: 12,
    color: '#ffffff',
    fontWeight: '600',
  },
  documentContent: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 20,
  },
  documentIcon: {
    fontSize: 40,
    marginRight: 16,
  },
  documentText: {
    flex: 1,
  },
  documentName: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333333',
    marginBottom: 4,
  },
  documentDescription: {
    fontSize: 14,
    color: '#666666',
  },
  selectedText: {
    color: '#1a73e8',
  },
  selectedSubtext: {
    color: '#1565c0',
  },
  checkmark: {
    fontSize: 24,
    color: '#1a73e8',
    fontWeight: 'bold',
  },
  footer: {
    padding: 20,
  },
  continueButton: {
    backgroundColor: '#1a73e8',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 16,
    borderRadius: 12,
    shadowColor: '#1a73e8',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 8,
  },
  disabledButton: {
    backgroundColor: '#cccccc',
    shadowOpacity: 0,
    elevation: 0,
  },
  continueButtonText: {
    color: '#ffffff',
    fontSize: 18,
    fontWeight: '600',
    marginRight: 8,
  },
  continueArrow: {
    color: '#ffffff',
    fontSize: 18,
    fontWeight: 'bold',
  },
});

export default DocumentTypeScreen;
